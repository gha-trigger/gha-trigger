"use strict";(self.webpackChunkgha_trigger=self.webpackChunkgha_trigger||[]).push([[401],{3905:(t,e,n)=>{n.d(e,{Zo:()=>l,kt:()=>m});var a=n(7294);function r(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function o(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(t);e&&(a=a.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,a)}return n}function i(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?o(Object(n),!0).forEach((function(e){r(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function s(t,e){if(null==t)return{};var n,a,r=function(t,e){if(null==t)return{};var n,a,r={},o=Object.keys(t);for(a=0;a<o.length;a++)n=o[a],e.indexOf(n)>=0||(r[n]=t[n]);return r}(t,e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(t);for(a=0;a<o.length;a++)n=o[a],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(r[n]=t[n])}return r}var p=a.createContext({}),u=function(t){var e=a.useContext(p),n=e;return t&&(n="function"==typeof t?t(e):i(i({},e),t)),n},l=function(t){var e=u(t.components);return a.createElement(p.Provider,{value:e},t.children)},c={inlineCode:"code",wrapper:function(t){var e=t.children;return a.createElement(a.Fragment,{},e)}},d=a.forwardRef((function(t,e){var n=t.components,r=t.mdxType,o=t.originalType,p=t.parentName,l=s(t,["components","mdxType","originalType","parentName"]),d=u(n),m=r,g=d["".concat(p,".").concat(m)]||d[m]||c[m]||o;return n?a.createElement(g,i(i({ref:e},l),{},{components:n})):a.createElement(g,i({ref:e},l))}));function m(t,e){var n=arguments,r=e&&e.mdxType;if("string"==typeof t||r){var o=n.length,i=new Array(o);i[0]=d;var s={};for(var p in e)hasOwnProperty.call(e,p)&&(s[p]=e[p]);s.originalType=t,s.mdxType="string"==typeof t?t:r,i[1]=s;for(var u=2;u<o;u++)i[u]=n[u];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},643:(t,e,n)=>{n.r(e),n.d(e,{assets:()=>p,contentTitle:()=>i,default:()=>c,frontMatter:()=>o,metadata:()=>s,toc:()=>u});var a=n(7462),r=(n(7294),n(3905));const o={sidebar_position:200},i="CI Repository",s={unversionedId:"config/ci-repository",id:"config/ci-repository",title:"CI Repository",description:"CI Repository's GitHub Actions Workflow",source:"@site/docs/config/ci-repository.md",sourceDirName:"config",slug:"/config/ci-repository",permalink:"/gha-trigger/config/ci-repository",draft:!1,editUrl:"https://github.com/suzuki-shunsuke/gha-trigger-docs/edit/main/docs/config/ci-repository.md",tags:[],version:"current",sidebarPosition:200,frontMatter:{sidebar_position:200},sidebar:"tutorialSidebar",previous:{title:"Configuration",permalink:"/gha-trigger/config/"},next:{title:"GitHub Actions",permalink:"/gha-trigger/github-actions"}},p={},u=[{value:"CI Repository&#39;s GitHub Actions Workflow",id:"ci-repositorys-github-actions-workflow",level:2},{value:"1. Workflow Dispatch&#39;s inputs",id:"1-workflow-dispatchs-inputs",level:2},{value:"2. Checkout <code>CI Repository</code> and <code>Main Repository</code>",id:"2-checkout-ci-repository-and-main-repository",level:2},{value:"3. Use GitHub App instead of <code>${{ github.token }}</code>",id:"3-use-github-app-instead-of--githubtoken-",level:2},{value:"4. Update commit statuses",id:"4-update-commit-statuses",level:2}],l={toc:u};function c(t){let{components:e,...n}=t;return(0,r.kt)("wrapper",(0,a.Z)({},l,n,{components:e,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"ci-repository"},"CI Repository"),(0,r.kt)("h2",{id:"ci-repositorys-github-actions-workflow"},"CI Repository's GitHub Actions Workflow"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"Workflow Dispatch's inputs"),(0,r.kt)("li",{parentName:"ol"},"Checkout ",(0,r.kt)("inlineCode",{parentName:"li"},"CI Repository")," and ",(0,r.kt)("inlineCode",{parentName:"li"},"Main Repository")),(0,r.kt)("li",{parentName:"ol"},"Use GitHub App instead of ",(0,r.kt)("inlineCode",{parentName:"li"},"${{ github.token }}")),(0,r.kt)("li",{parentName:"ol"},"Update commit statuses")),(0,r.kt)("p",null,"e.g."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},'---\nname: Format Rego files\non:\n  workflow_dispatch:\n    inputs:\n      data:\n        required: true\nenv:\n  PR_NUMBER: ${{fromJSON(inputs.data).event.pull_request.number}}\n  MAIN_REPO_NAME: ${{fromJSON(inputs.data).event.repository.name}}\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - name: debug\n        run: echo "$INPUT" | jq\n        env:\n          INPUT: ${{inputs.data}}\n\n      # Set up job for gha-trigger\n      - uses: suzuki-shunsuke/gha-trigger-start-action@main\n        id: start\n        with:\n          data: ${{inputs.data}}\n          app_id: ${{secrets.APP_ID}}\n          app_private_key: ${{secrets.APP_PRIVATE_KEY}}\n\n      # Run CI as you like\n      - name: Add a Pull Request Label\n        run: gh pr edit -R "${{env.GHA_REPOSITORY}}" "$PR_NUMBER" --add-label "help wanted"\n        env:\n          GITHUB_TOKEN: ${{steps.start.outputs.github_app_token}}\n\n      # Lastly, update the commit status per job\n      - uses: suzuki-shunsuke/update-commit-status-action@main\n        if: always()\n        with:\n          repo_owner: ${{env.GHA_REPOSITORY_OWNER}}\n          repo_name: ${{env.MAIN_REPO_NAME}}\n          sha: ${{env.GHA_HEAD_SHA}}\n          github_token: ${{steps.start.outputs.github_app_token}}\n          state: ${{job.status}}\n')),(0,r.kt)("h2",{id:"1-workflow-dispatchs-inputs"},"1. Workflow Dispatch's inputs"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"on:\n  workflow_dispatch:\n    inputs:\n      data:\n        required: true\n")),(0,r.kt)("p",null,"The input ",(0,r.kt)("inlineCode",{parentName:"p"},"data")," is a JSON string.\nTo get data from ",(0,r.kt)("inlineCode",{parentName:"p"},"data"),", you have to parse ",(0,r.kt)("inlineCode",{parentName:"p"},"data")," with ",(0,r.kt)("a",{parentName:"p",href:"https://docs.github.com/en/actions/learn-github-actions/expressions#fromjson"},"fromJSON"),"."),(0,r.kt)("p",null,"e.g."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"env:\n  PR_NUMBER: ${{fromJSON(inputs.data).event.pull_request.number}}\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"${{fromJSON(inputs.data)}}.event"),": ",(0,r.kt)("a",{parentName:"li",href:"https://docs.github.com/en/actions/using-workflows/events-that-trigger-workflows"},"Webhook event payload")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"${{fromJSON(inputs.data)}}.event_name"),": event name (e.g. ",(0,r.kt)("inlineCode",{parentName:"li"},"push"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"pull_request"),")")),(0,r.kt)("h2",{id:"2-checkout-ci-repository-and-main-repository"},"2. Checkout ",(0,r.kt)("inlineCode",{parentName:"h2"},"CI Repository")," and ",(0,r.kt)("inlineCode",{parentName:"h2"},"Main Repository")),(0,r.kt)("p",null,"Checkout ",(0,r.kt)("inlineCode",{parentName:"p"},"CI Repository")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"Main Repository")," by ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/suzuki-shunsuke/gha-trigger-start-action"},"gha-trigger-start-action"),"."),(0,r.kt)("h2",{id:"3-use-github-app-instead-of--githubtoken-"},"3. Use GitHub App instead of ",(0,r.kt)("inlineCode",{parentName:"h2"},"${{ github.token }}")),(0,r.kt)("p",null,"To access Main Repository, you have to use access token other than ",(0,r.kt)("inlineCode",{parentName:"p"},"${{ github.token }}"),"."),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://github.com/suzuki-shunsuke/gha-trigger-start-action"},"gha-trigger-start-action")," outputs a GitHub App Token."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},'- uses: suzuki-shunsuke/gha-trigger-start-action@main\n  id: start\n  with:\n    data: ${{inputs.data}}\n    app_id: ${{secrets.APP_ID}}\n    app_private_key: ${{secrets.APP_PRIVATE_KEY}}\n\n- name: Add a Pull Request Label\n  run: gh pr edit -R "${{env.GHA_REPOSITORY}}" "$PR_NUMBER" --add-label "help wanted"\n  env:\n    GITHUB_TOKEN: ${{steps.start.outputs.github_app_token}} # Use GitHub App Token\n')),(0,r.kt)("h2",{id:"4-update-commit-statuses"},"4. Update commit statuses"),(0,r.kt)("p",null,"You have to update a commit status yourself."),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://github.com/suzuki-shunsuke/gha-trigger-start-action"},"gha-trigger-start-action")," updates a commit status to ",(0,r.kt)("inlineCode",{parentName:"p"},"pending"),".\nAnd lastly, you have to update the commit status according to the job status by ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/suzuki-shunsuke/update-commit-status-action"},"update-commit-status-action"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"# Lastly, update the commit status per job\n- uses: suzuki-shunsuke/update-commit-status-action@main\n  if: always()\n  with:\n    repo_owner: ${{env.GHA_REPOSITORY_OWNER}}\n    repo_name: ${{env.MAIN_REPO_NAME}}\n    sha: ${{env.GHA_HEAD_SHA}}\n    github_token: ${{steps.start.outputs.github_app_token}}\n    state: ${{job.status}}\n")))}c.isMDXComponent=!0}}]);